#!/usr/bin/env node

var cliMode         = true;
var config          = require( __dirname + '/../../build/config/config' );
var app             = require( __dirname + '/../../build/bootstrap.js' )( config, cliMode );
var schemaBuilder   = app.bundleManager.container.getService( 'database/schema' );
var argv			= require( 'minimist' )( process.argv.slice( 2 ) );
var _				= require( 'lodash' );
var sequence		= require( 'when/sequence' );

var execsql     = require( 'execsql' );
var config      = require( global.app.root + '/config/config' );
var schema		= require( global.app.root + '/config/database/schema' );
var dbConfig    = {
	host: config.database.connection.host,
	user: config.database.connection.user,
	password: config.database.connection.password
};

var Message 			= require( global.app.root + '/vendor/easy/core/Message' )();
var titleError			= "Error when initializing roles and users";
var consequenceError	= "Initialization aborted.";

if ( _.indexOf( 'lite', argv._ ) !== -1 || argv.lite ) {
	/*
	 * Standalone mode, we first truncate users and then roles table, and init roles and users again
	 */
	truncateRolesAndUsersTables()
	.then( function() {
		startup();
	})
	.catch( function( error ) {
		raiseError( error );
	});
} else {
	/*
	 * Normal mode, we call migrate before init roles and users
	 * Indicate to migrate we are waiting him to call callback passed with argv
	 */
	process.argv.standalone = false;
	process.argv.callback	= startup;
	require( './migrate' );
}

function raiseError( err ) {
	Message.error({
		title: titleError,
		message: err,
		consequence: consequenceError,
		exit: 0
	});
}

function truncateRolesAndUsersTables() {
	return new Promise( function( resolve, reject ) {
		var usersTableName = _.has( schema, 'users' ) ? 'users' : _.has( schema, 'user' ) ? 'user' : false;
		var rolesTableName = _.has( schema, 'roles' ) ? 'roles' : _.has( schema, 'role' ) ? 'role' : false;

		if ( false === usersTableName ) {
			raiseError( 'Users table not found into schema.js, possibilities tried: users, user' );
		} else if ( false === rolesTableName ) {
			raiseError( 'Roles table not found into schema.js, possibilities tried: roles, role' );
		}

		var tables = {
			users: usersTableName,
		  	roles: rolesTableName
		};

		var promiseTruncateUsersTable = schemaBuilder.truncateTable( tables.users );
		var promiseClearRolesTable = schemaBuilder.clearTable( tables.roles );

	  	promiseTruncateUsersTable
		.then( function() {
			promiseClearRolesTable
			.then( function() {
				resolve();
			})
			.catch( function( error ) {
				reject( error );
			})
		})
		.catch( function( error ) {
			reject( error );
		})
	});
}

function startup() {

	var rolesTable = schema.roles;
	var rolesToAppend = {
		admin: {
			id: 1,
			name: 'Administrator',
			slug: 'administrator'
		},

		user: {
			id: 2,
			name: 'User',
			slug: 'user'
		}
	};

	var usersTable = schema.users;
	var usersToAppend = {
		admin: {
			id: 1,
			username: 'admin',
			email: 'admin@easy.com',
			password: 'K18necxhS4G;ur4', // http://randomkeygen.com/ -> Strong passwords
			role_id: rolesToAppend.admin.id
		},

		john: {
			id: 2,
			username: 'johndoe',
			email: 'john.doe@easy.com',
			password: '2Z7P97Y3o829gnr',
			role_id: rolesToAppend.user.id
		}
	};

	var sqlUse      = 'use ' + config.database.connection.database + ';';

	/*
	 * Roles part
	 */
	var sqlRoles    = 'insert into roles ';

	var rolesTablePropertiesLength	= Object.keys( rolesTable ).length;
	var currentRolesTableProperty	= 1;

	sqlRoles += '(';
	Object.keys( rolesTable ).forEach( function( column ) {
		sqlRoles += column;

		if ( currentRolesTableProperty++ < rolesTablePropertiesLength ) {
			sqlRoles += ', ';
		}
	});
	sqlRoles += ') values ';

	var rolesLength = Object.keys( rolesToAppend ).length;
	var currentRole = 1;
	Object.keys( rolesToAppend ).forEach( function( role ) {
		var rolePropertiesLength 	= Object.keys( rolesToAppend[ role ] ).length;
		var currentRoleProperty		= 1;

		sqlRoles += '(';
		Object.keys( rolesToAppend[ role ] ).forEach( function( roleProperty ) {
			sqlRoles += ( typeof rolesToAppend[ role ][ roleProperty ] !== 'number' ) ? '"' + rolesToAppend[ role ][ roleProperty ] + '"' : rolesToAppend[ role ][ roleProperty ];

			if ( currentRoleProperty++ < rolePropertiesLength ) {
				sqlRoles += ', ';
			}
		});
		sqlRoles += ')';

		if ( currentRole++ < rolesLength ) {
			sqlRoles += ', ';
		} else {
			sqlRoles += ';';
		}
	});


	/*
	 * Users part
	 */
	var sqlUsers    = 'insert into users ';

	var usersTablePropertiesLength	= Object.keys( usersTable ).length;
	var currentUsersTableProperty	= 1;

	sqlUsers += '(';
	Object.keys( usersTable ).forEach( function( column ) {
		sqlUsers += column;

		if ( currentUsersTableProperty++ < usersTablePropertiesLength ) {
			sqlUsers += ', ';
		}
	});
	sqlUsers += ') values ';

	var usersLength = Object.keys( usersToAppend ).length;
	var currentUser = 1;
	Object.keys( usersToAppend ).forEach( function( user ) {
		var userPropertiesLength 	= Object.keys( usersToAppend[ user ] ).length;
		var currentUserProperty		= 1;

		sqlUsers += '(';
		Object.keys( usersToAppend[ user ] ).forEach( function( userProperty ) {
			sqlUsers += ( typeof usersToAppend[ user ][ userProperty ] !== 'number' ) ? '"' + usersToAppend[ user ][ userProperty ] + '"' : usersToAppend[ user ][ userProperty ];

			if ( currentUserProperty++ < userPropertiesLength ) {
				sqlUsers += ', ';
			}
		});
		sqlUsers += ')';

		if ( currentUser++ < usersLength ) {
			sqlUsers += ', ';
		} else {
			sqlUsers += ';';
		}
	});

	execsql.config( dbConfig )
		.exec( sqlUse, function( err, results ) {
	        if ( err ) {
				raiseError( err );
	        }
	    })
		.exec( sqlRoles, function( err, results ) {
	        if ( err ) {
				raiseError( err );
	        }
		})
		.exec( sqlUsers, function( err, results ) {
	        if ( err ) {
				raiseError( err );
	        } else {
				Message.success( "Database initialized.", true );
	        }
	        process.exit();
		});
}
