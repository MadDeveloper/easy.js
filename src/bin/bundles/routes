#!/usr/bin/env node
import fs                                   from 'fs'
import path                                 from 'path'
import pad                                  from 'pad-right'
import minimist                             from 'minimist'
import { kernel, bundleManager, container } from '~/bootstrap'

const argv      = minimist( process.argv.slice( 2 ) )
const cli       = container.getComponent( 'Console' )
const router    = container.getComponent( 'Router' )
const save      = argv.s || 's' === argv._[ 0 ] || argv.save || 'save' === argv._[ 0 ]

let route               = ''
let routes              = ''
let currentDisplayRoute = ''

const routesStack = router.scope.stack
for ( let stack in routesStack ) {
   if ( routesStack.hasOwnProperty( stack ) ) {
       route = routesStack[ stack ].route

       if ( route ) {
           route.stack.forEach( layer => {
               if ( layer.method ) {
                   currentDisplayRoute = `${pad( layer.method.toUpperCase(), 'delete'.length, ' ' )} - ${route.path}`

                   if ( save ) {
                       routes += `${currentDisplayRoute}\n`
                   } else {
                       cli.log( currentDisplayRoute )
                   }
               }
           })
       }
   }
}

if ( save ) {
    const routesFilePath = path.resolve( `${kernel.path.root}/../routes.txt` )
    fs.writeFileSync( routesFilePath, routes, { encoding: 'utf8' } )
    cli.success( `Routes saved into ${routesFilePath}` )
}

cli.line()
process.exit()
