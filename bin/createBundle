#!/usr/bin/env node

var fs      = require( 'fs' ),
    walk    = require( 'walk' ),
    path    = require( 'path' ),
    Message = require( __dirname + '/../vendor/easy/Message' )(),
    argv    = require( 'minimist' )( process.argv.slice( 2 ) );

/*
 * Apply Polyfills
 */
require( __dirname + '/../vendor/easy/Polyfills' );

var nameBundleFromArgv = argv._[ 0 ] || argv.name || argv.n || "";

if ( nameBundleFromArgv.length > 0 ) {

    var nameBundle          = nameBundleFromArgv.capitalizeFirstLetter(),
        bundlesPath         = __dirname + "/../src/Bundles";
    var nameBundleLowerCase = nameBundle.decapitalizeFirstLetter(),
        skeletonBundlePath  = bundlesPath + "/Skeleton",
        bundleCreatingPath  = bundlesPath + "/" + nameBundle;

    /*
     * Check if bundle isn't defined yet
     */
    fs.lstat( bundlesPath + "/" + nameBundle, function( err, stats ) {
        if ( !err && stats.isDirectory() ) {
            Message.error({
                title: "Impossible to create bundle",
                message: nameBundle + " bundle already exists.",
                consequence: "Creation aborted."
            });
        }
    });

    /*
     * Check if Skeleton bundle is defined
     */
    fs.lstat( skeletonBundlePath, function ( err, stats ) {
        if ( err || !stats.isDirectory() ) {
            Message.error({
                title: "Impossible to create bundle",
                message: "Skeleton bundle isn't defined.",
                consequence: "Creation aborted."
            });
        }
    });

    /*
     * Check if new bundle directory is correctly created
     */
    fs.mkdir( bundleCreatingPath, 0775, function( err ) {
        if ( err ) {
            Message.error({
                title: "Impossible to create bundle",
                message: "Error when trying create bundle directory.",
                consequence: "Creation aborted."
            });
        }
    });

    var walker = walk.walk( skeletonBundlePath );

    walker.on( "names", function ( root, nodeNamesArray ) {
        nodeNamesArray.sort( function ( a, b ) {
            if ( a > b ) return 1;
            if ( a < b ) return -1;
            return 0;
        });
    });

    walker.on( "directories", function ( root, dirStatsArray, next ) {
        // dirStatsArray is an array of `stat` objects with the additional attributes
        // * type
        // * error
        // * name
        var newDirName = '';
        for ( i in dirStatsArray ) {
          newDirName = dirStatsArray[ i ].name.replace( /Skeleton/gi, nameBundle );
          fs.mkdir( bundleCreatingPath + '/' + newDirName, function( err ) {
              if ( err ) {
                  Message.error({
                      title: "Impossible to create bundle",
                      message: "Error when trying create bundle sub-directory <" + newDirName + ">.",
                      consequence: "Creation aborted."
                  });
              }
          });
        }

        next();
    });

    walker.on( "file", function ( root, fileStats, next ) {
        var skeletonFilePath = path.join( root, fileStats.name );
        var newBundleFilePath = skeletonFilePath.replace( /Skeleton/g, nameBundle);

        fs.readFile( skeletonFilePath, 'utf8', function ( err, data ) {
            fs.writeFile(
                newBundleFilePath,
                data.replace( /Skeleton/g, nameBundle).replace( /skeleton/g, nameBundleLowerCase),
                {
                    encoding: 'utf8',
                    mode: 0775
                },
                function( err ) {
                    if ( err ) {
                        Message.error({
                            title: "Impossible to create bundle",
                            message: "Error when trying create bundle file <" + fileStats.name + ">.",
                            consequence: "Creation aborted."
                        });
                    }
                }
            );
            next();
        });
    });

    walker.on( "errors", function ( root, nodeStatsArray, next ) {
        next();
    });

    walker.on( "end", function () {
        Message.success( "Bundle " + nameBundle + " created." );
    });

} else {
    Message.info( "\nCommand: \n[node] createBundle nameOfBundle\n" );
    process.exit();
}
