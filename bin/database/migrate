#!/usr/bin/env node

var cliMode         = true;
var config          = require( __dirname + '/../../config/config' );
var app             = require( __dirname + '/../../bootstrap.js' )( config, cliMode );
var schemaBuilder   = app.BundleManager.getDependencyInjector().getService( 'database.schema' );

var fs = require( 'fs' );
var knex = require( global.app.root + '/config/database/database' );
var Schema = require( global.app.root + '/config/database/schema' );
var sequence = require( 'when/sequence' );
var _ = require( 'lodash' );

var Message 			= require( global.app.root + '/vendor/easy/Message' )();
var titleError			= "Error when updating database";
var consequenceError	= "Migration aborted.";

/*
 * Functions
 */
function raiseError( err ) {
	Message.error({
		title: titleError,
		message: err,
		consequence: consequenceError,
		exit: 0
	});
}


function dropTable( tableName ) {
    return knex.schema.dropTableIfExists( tableName );
}

function createTable(tableName) {
  return knex.schema.createTable(tableName, function (table) {
        var column;
        var columnKeys = _.keys(Schema[tableName]);
        console.log( "Updating table : " + tableName );
        _.each(columnKeys, function (key) {
          if (Schema[tableName][key].type === 'text' && Schema[tableName][key].hasOwnProperty('fieldtype')) {
            column = table[Schema[tableName][key].type](key, Schema[tableName][key].fieldtype);
          }
          else if (Schema[tableName][key].type === 'string' && Schema[tableName][key].hasOwnProperty('maxlength')) {
            column = table[Schema[tableName][key].type](key, Schema[tableName][key].maxlength);
          }
          else if (Schema[tableName][key].type === 'decimal' && Schema[tableName][key].hasOwnProperty('precision')) {
            column = table[Schema[tableName][key].type](key, Schema[tableName][key].precision);
          }
          else {
            column = table[Schema[tableName][key].type](key);
          }
          if (Schema[tableName][key].hasOwnProperty('nullable') && Schema[tableName][key].nullable === true) {
            column.nullable();
          }
          else {
            column.notNullable();
          }
          if (Schema[tableName][key].hasOwnProperty('primary') && Schema[tableName][key].primary === true) {
            column.primary();
          }
          if (Schema[tableName][key].hasOwnProperty('unique') && Schema[tableName][key].unique) {
            column.unique();
          }
          if (Schema[tableName][key].hasOwnProperty('unsigned') && Schema[tableName][key].unsigned) {
            column.unsigned();
          }
          if (Schema[tableName][key].hasOwnProperty('references')) {
            column.references(Schema[tableName][key].references);
          }
          if (Schema[tableName][key].hasOwnProperty('onDelete') && Schema[tableName][key].onDelete.length > 0) {
            column.onDelete(Schema[tableName][key].onDelete);
          }
          if (Schema[tableName][key].hasOwnProperty('onUpdate') && Schema[tableName][key].onUpdate.length > 0) {
            column.onUpdate(Schema[tableName][key].onUpdate);
          }
          if (Schema[tableName][key].hasOwnProperty('defaultTo')) {
            column.defaultTo(Schema[tableName][key].defaultTo);
          }
        });
    });
}

function dropTables() {
    var tables = [];
    var tableNames = _.keys(Schema);
    // we need to reverse tables schema, to delete in first table which contains fk and not the parents, otherwise error will occur because of fk.
    tableNames.reverse();
    tables = _.map(tableNames, function (tableName) {
      return function () {
        return dropTable( tableName );
      };
    });
    return sequence(tables);
}

function createTables () {
  var tables = [];
  var tableNames = _.keys(Schema);
  tables = _.map(tableNames, function (tableName) {
    return function () {
      return createTable(tableName);
    };
  });
  return sequence(tables);
}

function migrate() {
	dropTables()
	.then( function() {

		var standalone = true;
		if ( false === process.argv.standalone ) {
			standalone = false;
		}

		if ( standalone ) {
			createTables()
			.then( function() {
				Message.success( "Schema updated.", true );
			})
			.catch( function ( error ) {
				raiseError( error );
			});
		} else {
			var callback = process.argv.callback || function() {};
			createTables()
			.then( function() {
				Message.success( "Schema updated." );
				callback();
			})
			.catch( function ( error ) {
				raiseError( error );
				callback();
			});
		}

	})
	.catch( function ( error ) {
		raiseError( error );
	});
}


function updateDatabaseNameInConfig() {
	var databaseConfigFilePath = global.app.root + '/config/database/database.js';
	fs.readFile( databaseConfigFilePath, { encoding: 'utf8' }, function( error, data ) {
		if ( error ) {
			errorUpdatingDatabaseConfigProperty( error );
		} else {
	   		var dataUpdated = data.replace( /database\s*:\s*\w+/, 'database : params.connection.database' );
			fs.writeFile( databaseConfigFilePath, dataUpdated, 'utf8', function ( error ) {
				if ( error ) {
					errorUpdatingDatabaseConfigProperty( error );
				} else {
					/*
					 * Configuration succefully edited
					 * we reconnect database to new schema
					 */
					delete require.cache[ require.resolve( global.app.root + '/config/database/database' ) ];
					knex = require( global.app.root + '/config/database/database' );

					/*
					 * Continue migration
					 */
					migrate();
				}
		  	});
		}
	});

	function errorUpdatingDatabaseConfigProperty( error ) {
		Message.error({
			title: 'Error when trying to edit the database connection property into ' + global.app.root + '/config/config.js path',
			message: error,
			consequence: 'Migration aborted.',
			exit: 0
		});
	}
}


/*
 * Code executed first
 */
schemaBuilder.createSchema( config.database.connection.database )
.then( function( schema ) {
	/*
	 * Database created for first time, we set the database config property into ~/config/config.js -> database.connection.database
	 */
 	Message.success( 'Database ' + config.database.connection.database + ' created. Think to check database encoding.' );
	updateDatabaseNameInConfig();
})
.catch( function( error ) {
	migrate();
});
