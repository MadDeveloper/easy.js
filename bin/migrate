#!/usr/bin/env node

var knex = require( './../config/database/database' );
var Schema = require( './../config/database/schema' );
var sequence = require( 'when/sequence' );
var _ = require( 'lodash' );


function dropTable( tableName ) {
    return knex.schema.dropTableIfExists( tableName );
}

function createTable(tableName) {
  return knex.schema.createTable(tableName, function (table) {
        var column;
        var columnKeys = _.keys(Schema[tableName]);
        console.log( "Updating table : " + tableName );
        _.each(columnKeys, function (key) {
          if (Schema[tableName][key].type === 'text' && Schema[tableName][key].hasOwnProperty('fieldtype')) {
            column = table[Schema[tableName][key].type](key, Schema[tableName][key].fieldtype);
          }
          else if (Schema[tableName][key].type === 'string' && Schema[tableName][key].hasOwnProperty('maxlength')) {
            column = table[Schema[tableName][key].type](key, Schema[tableName][key].maxlength);
          }
          else if (Schema[tableName][key].type === 'decimal' && Schema[tableName][key].hasOwnProperty('precision')) {
            column = table[Schema[tableName][key].type](key, Schema[tableName][key].precision);
          }
          else {
            column = table[Schema[tableName][key].type](key);
          }
          if (Schema[tableName][key].hasOwnProperty('nullable') && Schema[tableName][key].nullable === true) {
            column.nullable();
          }
          else {
            column.notNullable();
          }
          if (Schema[tableName][key].hasOwnProperty('primary') && Schema[tableName][key].primary === true) {
            column.primary();
          }
          if (Schema[tableName][key].hasOwnProperty('unique') && Schema[tableName][key].unique) {
            column.unique();
          }
          if (Schema[tableName][key].hasOwnProperty('unsigned') && Schema[tableName][key].unsigned) {
            column.unsigned();
          }
          if (Schema[tableName][key].hasOwnProperty('references')) {
            column.references(Schema[tableName][key].references);
          }
          if (Schema[tableName][key].hasOwnProperty('onDelete') && Schema[tableName][key].onDelete.length > 0) {
            column.onDelete(Schema[tableName][key].onDelete);
          }
          if (Schema[tableName][key].hasOwnProperty('onUpdate') && Schema[tableName][key].onUpdate.length > 0) {
            column.onUpdate(Schema[tableName][key].onUpdate);
          }
          if (Schema[tableName][key].hasOwnProperty('defaultTo')) {
            column.defaultTo(Schema[tableName][key].defaultTo);
          }
        });
    });
}

function dropTables() {
    var tables = [];
    var tableNames = _.keys(Schema);
    // we need to reverse tables schema, to delete in first table which contains fk and not the parents, otherwise error will occur because of fk.
    tableNames.reverse();
    tables = _.map(tableNames, function (tableName) {
      return function () {
        return dropTable( tableName );
      };
    });
    return sequence(tables);
}

function createTables () {
  var tables = [];
  var tableNames = _.keys(Schema);
  tables = _.map(tableNames, function (tableName) {
    return function () {
      return createTable(tableName);
    };
  });
  return sequence(tables);
}

dropTables()
  .then(function() {
    createTables()
      .then(function() {
        console.log('---- Schema updated ----');
        process.exit( 1 );
      })
      .catch(function (error) {
        throw error;
        process.exit();
    });
  })
  .catch(function (error) {
    throw error;
    process.exit();
  });
