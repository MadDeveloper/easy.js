#!/usr/bin/env node
'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _walk = require('walk');

var _walk2 = _interopRequireDefault(_walk);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _readlineSync = require('readline-sync');

var _lodash = require('lodash');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _config = require('./../../config/config');

var _config2 = _interopRequireDefault(_config);

var _bootstrap = require('./../../bootstrap.js');

var _bootstrap2 = _interopRequireDefault(_bootstrap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = (0, _minimist2.default)(process.argv.slice(2));
var cliMode = true;

var app = new _bootstrap2.default(_config2.default, cliMode);
var kernel = app.kernel;
var bundleManager = app.bundleManager;
var container = bundleManager.container;
var message = container.getComponent('Message');
var schemaDatabaseService = container.getService('database.schema');
var stringService = container.getService('string');
var nameBundleFromArgv = argv._[0] || argv.name || argv.n || "";

if (nameBundleFromArgv.length > 0) {
    (function () {
        var checkIfSkeletonIsDefined = function checkIfSkeletonIsDefined() {
            /*
             * Check if Skeleton bundle is defined
             */
            _fs2.default.lstat(skeletonBundlePath, function (err, stats) {
                if (err || !stats.isDirectory()) {
                    message.error({
                        title: "Impossible to create bundle",
                        message: "Skeleton bundle isn't defined.",
                        consequence: "Creation aborted.",
                        exit: 0
                    });
                } else {
                    askForTable();
                }
            });
        };

        var askForTable = function askForTable() {
            var createAssociatedTable = (0, _readlineSync.question)('Do you want create an associated table into database? (y/n) ').trim().toLowerCase();

            if ((0, _lodash.indexOf)(positiveAnswers, createAssociatedTable) !== -1) {
                /*
                 * Table associated requested
                 */
                checkExistanceOfSchemaFile(function () {
                    askForTableName();
                });
            } else if ((0, _lodash.indexOf)(negativeAnswers, createAssociatedTable) !== -1) {
                /*
                 * No table associated requested
                 */
                createBundleDirectory();
            } else {
                askForTable();
            }
        };

        var askForTableName = function askForTableName() {
            console.log('\n');

            var defaultTableName = stringService.asSnakeCase(nameBundleLowerCase) + 's';
            var answerTableName = stringService.asSnakeCase((0, _readlineSync.question)('Table name (default: ' + defaultTableName + '): '));

            tableName = answerTableName.length > 0 ? answerTableName : defaultTableName;

            askForProperties();
        };

        var askForProperties = function askForProperties() {
            console.log('\n');
            /*
             * We ask for properties
             */
            var columnName = stringService.asSnakeCase((0, _readlineSync.question)('Column name (let empty if the table is complete): '));
            var propertiesLength = Object.keys(properties).length;

            if (columnName.length === 0 && propertiesLength === 0) {
                askForTable();
            } else if (columnName.length === 0 && propertiesLength > 0) {
                createTable();
            } else {
                var columnType = stringService.cleanAccents((0, _readlineSync.question)('Column type: (availables: ' + availablesColumnType.join(', ') + '): ').toLowerCase().trim());

                if ((0, _lodash.indexOf)(availablesColumnType, columnType) !== -1) {
                    /*
                     * Everything is ok, we push new column
                     */
                    properties[columnName] = {};
                    properties[columnName].type = columnType;

                    /*
                     * Special property ? Ask for more details
                     */
                    if ((0, _lodash.indexOf)(specialColumnType, columnType) !== -1) {
                        askDetailsForSpecialColumnType(columnType, columnName);
                    }

                    askForProperties();
                } else {
                    message.error({
                        title: "Column type not valid",
                        message: "Column type can be: " + availablesColumnType.join(', ')
                    });
                    askForProperties();
                }
            }
        };

        var askDetailsForSpecialColumnType = function askDetailsForSpecialColumnType(type, columnName) {
            var property = properties[columnName];

            switch (type) {

                case 'increments':
                    var anwserDefineAsPrimary = (0, _readlineSync.question)('Define as primary? (y/n) ').trim().toLowerCase();

                    if ((0, _lodash.indexOf)(positiveAnswers, anwserDefineAsPrimary) !== -1) {
                        /*
                         * Define as primary
                         */
                        property.primary = true;
                    } else if ((0, _lodash.indexOf)(negativeAnswers, anwserDefineAsPrimary) === -1) {
                        /*
                         * Not recognized answer
                         */
                        askDetailsForSpecialColumnType(type, columnName);
                    }

                    askForUniqueColumn(columnName);
                    property.nullable = false;
                    break;

                case 'integer':
                case 'bigInteger':
                    var answerIsAReference = (0, _readlineSync.question)('Define as reference (foreign key)? (y/n) ').trim().toLowerCase();

                    if ((0, _lodash.indexOf)(positiveAnswers, answerIsAReference) !== -1) {
                        /*
                         * Define as reference
                         */
                        property.unsigned = true;

                        var answerReference = (0, _readlineSync.question)('Table.ColumnId as reference (exemple: roles.id): ').trim().toLowerCase();

                        if (answerReference.indexOf('.') !== -1 && answerReference.match(/^\w+\.\w+$/)) {
                            property.references = answerReference;

                            var validsOnEventAction = ['restrict', 'cascade', 'set null', 'no action'];
                            var defaultOnEventAction = 'restrict';

                            /*
                             * OnDelete
                             */
                            var answerOnDelete = (0, _readlineSync.question)('On delete action: (' + validsOnEventAction.join(', ') + ', default: ' + defaultOnEventAction + ') ').trim().toLowerCase();

                            if ((0, _lodash.indexOf)(validsOnEventAction, answerOnDelete) !== -1) {
                                property.onDelete = answerOnDelete;
                            } else {
                                property.onDelete = defaultOnEventAction;
                            }

                            /*
                             * OnUpdate
                             */
                            var answerOnUpdate = (0, _readlineSync.question)('On update action: (' + validsOnEventAction.join(', ') + ', default: ' + defaultOnEventAction + ') ').trim().toLowerCase();

                            if ((0, _lodash.indexOf)(validsOnEventAction, answerOnUpdate) !== -1) {
                                property.onUpdate = answerOnUpdate;
                            } else {
                                property.onUpdate = defaultOnEventAction;
                            }
                        } else {
                            /*
                             * Wrong reference
                             */
                            delete property.unsigned;
                            message.error({
                                title: "Wrong reference",
                                message: "Reference -> " + answerReference + " is not a valid reference."
                            });
                            askDetailsForSpecialColumnType(type, columnName);
                        }
                    }

                    askForUniqueColumn(columnName);
                    askForNullableColumn(columnName);
                    break;

                case 'text':
                    var validsTextType = ['text', 'mediumtext', 'longtext'];
                    var defaultTextType = 'text';
                    var anwserTypeOfText = (0, _readlineSync.question)('Which kind of text? ( ' + validsTextType.join(', ') + ', default: ' + defaultTextType + ') ').trim().toLowerCase();

                    if ((0, _lodash.indexOf)(validsTextType, anwserTypeOfText) !== -1) {
                        property.fieldtype = anwserTypeOfText;
                    } else {
                        property.fieldtype = defaultTextType;
                    }

                    askForNullableColumn(columnName);
                    break;

                case 'string':
                    var minLength = 1,
                        maxLength = 255;
                    var answerMaxLength = (0, _readlineSync.question)('Max length (' + minLength + '-' + maxLength + ', default: ' + maxLength + '): ').trim();

                    if (!isNaN(answerMaxLength) && answerMaxLength >= minLength && answerMaxLength <= maxLength) {
                        /*
                         * Ok
                         */
                        property.maxlength = parseInt(answerMaxLength);
                    } else if (!isNaN(answerMaxLength)) {
                        /*
                         * Not in range, default value applicated
                         */
                        property.maxlength = maxLength;
                    } else {
                        /*
                         * Wrong answer, we ask again
                         */
                        askDetailsForSpecialColumnType(type, columnName);
                    }

                    askForUniqueColumn(columnName);
                    askForNullableColumn(columnName);
                    break;

                case 'float':
                case 'decimal':
                    var defaultPrecision = 8;
                    var answerPrecision = (0, _readlineSync.question)('Precision (integer, default: ' + defaultPrecision + '): ').trim();

                    if (answerPrecision.length === 0 || isNaN(answerPrecision) || !isFinite(answerPrecision)) {
                        property.precision = defaultPrecision;
                    } else {
                        property.precision = parseInt(answerPrecision);
                    }

                    if ('decimal' === type) {
                        /*
                         * Ask for scale
                         */
                        var defaultScale = 2;
                        var answerScale = (0, _readlineSync.question)('Scale (integer, default: ' + defaultScale + ')').trim();

                        if (answerScale.length === 0 || isNaN(answerScale) || !isFinite(answerScale)) {
                            property.scale = defaultScale;
                        } else {
                            property.scale = parseInt(answerScale);
                        }
                    }

                    askForNullableColumn(columnName);
                    break;
            }
        };

        var askForNullableColumn = function askForNullableColumn(columnName) {
            var answerNullable = (0, _readlineSync.question)('Define as nullable? (y/n) ').trim().toLowerCase();
            if ((0, _lodash.indexOf)(positiveAnswers, answerNullable) !== -1) {
                /*
                 * Define as nullable
                 */
                properties[columnName].nullable = true;
            } else if ((0, _lodash.indexOf)(negativeAnswers, answerNullable) !== -1) {
                /*
                 * Not nullable
                 */
                properties[columnName].nullable = false;
            } else {
                /*
                 * Wrong answer
                 */
                askForNullableColumn(columnName);
            }
        };

        var askForUniqueColumn = function askForUniqueColumn(columnName) {
            var answerAsUnique = (0, _readlineSync.question)('Define as unique? (y/n) ').trim().toLowerCase();

            if ((0, _lodash.indexOf)(positiveAnswers, answerAsUnique) !== -1) {
                /*
                 * Define as unique
                 */
                properties[columnName].unique = true;
            } else if ((0, _lodash.indexOf)(negativeAnswers, answerAsUnique) !== -1) {
                /*
                 * Not unique
                 */
                properties[columnName].unique = false;
            } else {
                /*
                 * Wrong answer
                 */
                askForUniqueColumn(columnName);
            }
        };

        var createTable = function createTable() {
            schemaDatabaseService.createTable(tableName, properties).then(function () {
                updateSchema();
            }).catch(function (error) {
                message.error({
                    title: "Error when creating table",
                    message: error,
                    consequence: "Bundle creation aborted.",
                    exit: 0
                });
            });
        };

        var updateSchema = function updateSchema() {
            /*
             * We stringify properties and insert it into ~/config/database/schema.js
             */
            checkExistanceOfSchemaFile(function () {
                _fs2.default.readFile(pathDatabaseSchema, { encoding: 'utf8' }, function (error, data) {
                    if (!error) {
                        var stringToWrite = 'export default {\n\t' + tableName + ': ' + JSON.stringify(properties) + ',\n\n';
                        var dataUpdated = data.replace(/export(\s*)default(\s)\{/i, stringToWrite);

                        _fs2.default.writeFile(pathDatabaseSchema, dataUpdated, 'utf8', function (error) {
                            if (!error) {
                                createBundleDirectory();
                            } else {
                                errorEditingSchema(error);
                            }
                        });
                    } else {
                        errorEditingSchema(error);
                    }
                });
            });

            function errorEditingSchema(error) {
                message.error({
                    title: "Impossible to update schema",
                    message: "Error when editing schema.js file: " + error,
                    consequence: "Bundle creation aborted.",
                    exit: 0
                });
            }
        };

        var checkExistanceOfSchemaFile = function checkExistanceOfSchemaFile(cb) {
            _fs2.default.lstat(pathDatabaseSchema, function (error, stat) {
                if (!error & stat.isFile()) {
                    cb();
                } else {
                    message.error({
                        title: "Impossible to update schema",
                        message: "schema.js not found at: " + pathDatabaseSchema,
                        consequence: "Bundle creation aborted.",
                        exit: 0
                    });
                }
            });
        };

        var createBundleDirectory = function createBundleDirectory() {
            /*
             * Check if new bundle directory is correctly created
             */
            _fs2.default.mkdir(bundleCreatingPath, function (err) {
                if (err) {
                    message.error({
                        title: "Impossible to create bundle",
                        message: "Error when trying create bundle directory.",
                        consequence: "Creation aborted.",
                        exit: 0
                    });
                } else {
                    if (process.geteuid && process.getgid) {
                        /* doesn't work on Windows, Android (only unix systems) */
                        _fs2.default.chownSync(bundleCreatingPath, process.geteuid(), process.getgid());
                    }

                    launchWalker();
                }
            });
        };

        var launchWalker = function launchWalker() {
            var walker = _walk2.default.walk(skeletonBundlePath);

            walker.on("names", function (root, nodeNamesArray) {
                nodeNamesArray.sort(function (a, b) {
                    if (a > b) return 1;
                    if (a < b) return -1;
                    return 0;
                });
            });

            walker.on("directories", function (root, dirStatsArray, next) {
                // dirStatsArray is an array of `stat` objects with the additional attributes
                // * type
                // * error
                // * name
                var newDirName = '';

                for (var i in dirStatsArray) {
                    newDirName = dirStatsArray[i].name.replace(/Skeleton/gi, nameBundle);

                    _fs2.default.mkdir(bundleCreatingPath + '/' + newDirName, function (err) {
                        if (err) {
                            message.error({
                                title: "Impossible to create bundle",
                                message: "Error when trying create bundle sub-directory <" + newDirName + ">.",
                                consequence: "Creation aborted.",
                                exit: 0
                            });
                        } else {
                            if (process.geteuid && process.getgid) {
                                /* doesn't work on Windows, Android (only unix systems) */
                                _fs2.default.chownSync(bundleCreatingPath + '/' + newDirName, process.geteuid(), process.getgid());
                            }
                        }
                    });
                }

                next();
            });

            walker.on("file", function (root, fileStats, next) {
                var skeletonFilePath = _path2.default.join(root, fileStats.name);
                var newBundleFilePath = skeletonFilePath.replace(/Skeleton/g, nameBundle).replace(/skeleton/g, nameBundleLowerCase);

                try {
                    var data = _fs2.default.readFileSync(skeletonFilePath, 'utf8');

                    /*
                     * We write tableName specified above
                     */
                    if (fileStats.name.toLowerCase().indexOf('skeleton.js') !== -1) {
                        data = data.replace(/tableName(\s*):(\s*)('|")\w*('|")/i, 'tableName$1:$2$3' + tableName + '$4');
                    }

                    _fs2.default.writeFileSync(newBundleFilePath, data.replace(/Skeleton/g, nameBundle).replace(/skeleton/g, nameBundleLowerCase), { encoding: 'utf8' });

                    if (process.geteuid && process.getgid) {
                        /* doesn't work on Windows, Android (only unix systems) */
                        _fs2.default.chownSync(newBundleFilePath, process.geteuid(), process.getgid());
                    }

                    next();
                } catch (error) {
                    message.error({
                        title: "Impossible to create bundle",
                        message: "Error: " + JSON.stringify(error),
                        consequence: "Creation aborted.",
                        exit: 0
                    });
                }
            });

            walker.on("errors", function (root, nodeStatsArray, next) {
                next();
            });

            walker.on("end", function () {
                message.success("\nBundle " + nameBundle + " created.", true);
            });
        };

        var positiveAnswers = ['y', 'ye', 'yes'];
        var negativeAnswers = ['n', 'no'];
        var bundlesPath = __dirname + '/../../../src/bundles';
        var skeletonBundlePath = bundlesPath + "/skeleton";

        var nameBundle = nameBundleFromArgv.trim();
        var nameBundleLowerCase = nameBundle.toLowerCase();
        var bundleCreatingPath = bundlesPath + "/" + nameBundle.toLowerCase();

        var tableName = '';
        var properties = {};

        var availablesColumnType = ['increments', 'integer', 'bigInteger', 'text', 'string', 'float', 'decimal', 'boolean', 'date', 'datetime', 'time', 'timestamp'];
        var specialColumnType = ['increments', 'integer', 'bigInteger', 'text', 'string', 'float', 'decimal'];
        var pathDatabaseSchema = kernel.path.config + '/database/schema.js';

        /*
         * Check if bundle isn't defined yet
         */
        _fs2.default.lstat(bundlesPath + "/" + nameBundle, function (err, stats) {
            if (!err && stats.isDirectory()) {
                message.error({
                    title: "Impossible to create bundle",
                    message: nameBundle + " bundle already exists.",
                    consequence: "Creation aborted.",
                    exit: 0
                });
            } else {
                checkIfSkeletonIsDefined();
            }
        });
    })();
} else {
    message.info("\nCommand: \n[node] createBundle nameOfBundle\n");
    process.exit();
}
