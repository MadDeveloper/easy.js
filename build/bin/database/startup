#!/usr/bin/env node
'use strict';

var _execsql = require('execsql');

var _execsql2 = _interopRequireDefault(_execsql);

var _lodash = require('lodash');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _config = require('./../../config/config');

var _config2 = _interopRequireDefault(_config);

var _schema = require('./../../config/database/schema');

var _schema2 = _interopRequireDefault(_schema);

var _bootstrap = require('./../../bootstrap.js');

var _bootstrap2 = _interopRequireDefault(_bootstrap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = (0, _minimist2.default)(process.argv.slice(2));
var cliMode = true;

var app = new _bootstrap2.default(_config2.default, cliMode);
var bundleManager = app.bundleManager;
var container = bundleManager.container;
var message = container.getComponent('Message');
var schemaDatabaseService = container.getService('database.schema');

var dbConfig = {
	host: _config2.default.database.connection.host,
	user: _config2.default.database.connection.user,
	password: _config2.default.database.connection.password
};

var titleError = "Error when initializing roles and users";
var consequenceError = "Initialization aborted.";

if ((0, _lodash.indexOf)('lite', argv._) !== -1 || argv.lite) {
	/*
  * Standalone mode, we first truncate users and then roles table, and init roles and users again
  */
	truncateRolesAndUsersTables().then(function () {
		startup();
	}).catch(function (error) {
		raiseError(error);
	});
} else {
	/*
  * Normal mode, we call migrate before init roles and users
  * Indicate to migrate we are waiting him to call callback passed with argv
  */
	process.argv.standalone = false;
	process.argv.callback = startup;
	require('./migrate');
}

function raiseError(err) {
	message.error({
		title: titleError,
		message: err,
		consequence: consequenceError,
		exit: 0
	});
}

function truncateRolesAndUsersTables() {
	return new Promise(function (resolve, reject) {
		var usersTableName = (0, _lodash.has)(_schema2.default, 'users') ? 'users' : (0, _lodash.has)(_schema2.default, 'user') ? 'user' : false;
		var rolesTableName = (0, _lodash.has)(_schema2.default, 'roles') ? 'roles' : (0, _lodash.has)(_schema2.default, 'role') ? 'role' : false;

		if (false === usersTableName) {
			raiseError('Users table not found into schema.js, possibilities tried: users, user');
		} else if (false === rolesTableName) {
			raiseError('Roles table not found into schema.js, possibilities tried: roles, role');
		}

		var tables = {
			users: usersTableName,
			roles: rolesTableName
		};

		var promiseTruncateUsersTable = schemaDatabaseService.truncateTable(tables.users);
		var promiseClearRolesTable = schemaDatabaseService.clearTable(tables.roles);

		promiseTruncateUsersTable.then(promiseClearRolesTable).catch(function (error) {
			reject(error);
		});
	});
}

function startup() {
	var rolesTable = _schema2.default.roles;
	var rolesToAppend = {
		admin: {
			id: 1,
			name: 'Administrator',
			slug: 'administrator'
		},

		user: {
			id: 2,
			name: 'User',
			slug: 'user'
		}
	};

	var usersTable = _schema2.default.users;
	var usersToAppend = {
		admin: {
			id: 1,
			username: 'admin',
			email: 'admin@easy.com',
			password: 'K18necxhS4G;ur4', // http://randomkeygen.com/ -> Strong passwords
			role_id: rolesToAppend.admin.id
		},

		john: {
			id: 2,
			username: 'johndoe',
			email: 'john.doe@easy.com',
			password: '2Z7P97Y3o829gnr',
			role_id: rolesToAppend.user.id
		}
	};

	var sqlUse = 'use ' + _config2.default.database.connection.database + ';';

	/*
  * Roles part
  */
	var sqlRoles = 'insert into roles ';

	var rolesTablePropertiesLength = Object.keys(rolesTable).length;
	var currentRolesTableProperty = 1;

	sqlRoles += '(';
	Object.keys(rolesTable).forEach(function (column) {
		sqlRoles += column;

		if (currentRolesTableProperty++ < rolesTablePropertiesLength) {
			sqlRoles += ', ';
		}
	});
	sqlRoles += ') values ';

	var rolesLength = Object.keys(rolesToAppend).length;
	var currentRole = 1;

	Object.keys(rolesToAppend).forEach(function (role) {
		var rolePropertiesLength = Object.keys(rolesToAppend[role]).length;
		var currentRoleProperty = 1;

		sqlRoles += '(';
		Object.keys(rolesToAppend[role]).forEach(function (roleProperty) {
			sqlRoles += typeof rolesToAppend[role][roleProperty] !== 'number' ? '"' + rolesToAppend[role][roleProperty] + '"' : rolesToAppend[role][roleProperty];

			if (currentRoleProperty++ < rolePropertiesLength) {
				sqlRoles += ', ';
			}
		});
		sqlRoles += ')';

		if (currentRole++ < rolesLength) {
			sqlRoles += ', ';
		} else {
			sqlRoles += ';';
		}
	});

	/*
  * Users part
  */
	var sqlUsers = 'insert into users ';

	var usersTablePropertiesLength = Object.keys(usersTable).length;
	var currentUsersTableProperty = 1;

	sqlUsers += '(';
	Object.keys(usersTable).forEach(function (column) {
		sqlUsers += column;

		if (currentUsersTableProperty++ < usersTablePropertiesLength) {
			sqlUsers += ', ';
		}
	});
	sqlUsers += ') values ';

	var usersLength = Object.keys(usersToAppend).length;
	var currentUser = 1;

	Object.keys(usersToAppend).forEach(function (user) {
		var userPropertiesLength = Object.keys(usersToAppend[user]).length;
		var currentUserProperty = 1;

		sqlUsers += '(';
		Object.keys(usersToAppend[user]).forEach(function (userProperty) {
			sqlUsers += typeof usersToAppend[user][userProperty] !== 'number' ? '"' + usersToAppend[user][userProperty] + '"' : usersToAppend[user][userProperty];

			if (currentUserProperty++ < userPropertiesLength) {
				sqlUsers += ', ';
			}
		});
		sqlUsers += ')';

		if (currentUser++ < usersLength) {
			sqlUsers += ', ';
		} else {
			sqlUsers += ';';
		}
	});

	_execsql2.default.config(dbConfig).exec(sqlUse, function (err, results) {
		if (err) {
			raiseError(err);
		}
	}).exec(sqlRoles, function (err, results) {
		if (err) {
			raiseError(err);
		}
	}).exec(sqlUsers, function (err, results) {
		if (err) {
			raiseError(err);
		} else {
			message.success("Database initialized.", true);
		}
		process.exit();
	});
}
