#!/usr/bin/env node
'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _lodash = require('lodash');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _sequence = require('when/sequence');

var _sequence2 = _interopRequireDefault(_sequence);

var _config = require('./../../config/config');

var _config2 = _interopRequireDefault(_config);

var _schema = require('./../../config/database/schema');

var _schema2 = _interopRequireDefault(_schema);

var _bootstrap = require('./../../bootstrap.js');

var _bootstrap2 = _interopRequireDefault(_bootstrap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = (0, _minimist2.default)(process.argv.slice(2));
var cliMode = true;

var app = new _bootstrap2.default(_config2.default, cliMode);
var kernel = app.kernel;
var bundleManager = app.bundleManager;
var container = bundleManager.container;
var message = container.getComponent('Message');
var schemaDatabaseService = container.getService('database.schema');

var titleError = "Error when updating database";
var consequenceError = "Migration aborted.";

/*
 * Functions
 */
function raiseError(err) {
	message.error({
		title: titleError,
		message: err,
		consequence: consequenceError,
		exit: 0
	});
}

function dropTables() {
	var tables = [];
	var tableNames = (0, _lodash.keys)(_schema2.default);

	// we need to reverse tables schema, to delete in first table which contains fk and not the parents, otherwise error will occur because of fk.
	tableNames.reverse();
	tables = (0, _lodash.map)(tableNames, function (tableName) {
		return function () {
			return schemaDatabaseService.dropTable(tableName);
		};
	});

	return (0, _sequence2.default)(tables);
}

function createTables() {
	var tables = [];
	var tableNames = (0, _lodash.keys)(_schema2.default);

	tables = (0, _lodash.map)(tableNames, function (tableName) {
		return function () {
			return schemaDatabaseService.createTable(tableName, _schema2.default[tableName]);
		};
	});

	return (0, _sequence2.default)(tables);
}

function migrate(standalone) {
	dropTables().then(function () {
		return new Promise(function (resolve, reject) {
			createTables().then(function () {
				var exitAfterSuccess = standalone;
				message.success("Schema updated.", exitAfterSuccess);
				resolve();
			}).catch(function (error) {
				raiseError(error);
				reject(error);
			});
		});
	}).catch(function (error) {
		raiseError(error);
	});
}

function updateDatabaseNameInConfig() {
	var databaseConfigFilePath = __dirname + '/../../../config/database/connector/knex.js';

	_fs2.default.readFile(databaseConfigFilePath, { encoding: 'utf8' }, function (error, data) {
		if (error) {
			errorUpdatingDatabaseConfigProperty(error);
		} else {
			var dataUpdated = data.replace(/database\s*:\s*\w+/, 'database : params.connection.database');

			_fs2.default.writeFile(databaseConfigFilePath, dataUpdated, 'utf8', function (error) {
				if (error) {
					errorUpdatingDatabaseConfigProperty(error);
				} else {
					/*
      * Configuration succefully edited
      * we reconnect database to new schema
      */
					delete require.cache[require.resolve(__dirname + '/../../../config/database/database')];

					var clearCache = true;
					schemaDatabaseService = container.getService('database.schema', clearCache);

					/*
      * Continue migration
      */
					migrate();
				}
			});
		}
	});

	function errorUpdatingDatabaseConfigProperty(error) {
		message.error({
			title: 'Error when trying to edit the database connection property into ~/src/config/config.js path',
			message: error,
			consequence: 'Migration aborted.',
			exit: 0
		});
	}
}

/*
 * Code executed first
 * Code permits create database, and we have to change connection string into knex conf file
 * Not finalized
 */
// schemaDatabaseService.createSchema( config.database.connection.database )
// .then( schema => {
// 	/*
// 	 * Database created for first time, we set the database config property into ~/src/config/config.js -> database.connection.database
// 	 */
//  	/*
// 	 *
// 	 * message.success( 'Database ' + config.database.connection.database + ' created. Think to check database encoding.' )
// 	 * updateDatabaseNameInConfig()
// 	 */
// })
// .catch( error => {
// 	migrate()
// })

(function () {
	'use strict';

	var standalone = true;

	if (false === process.argv.standalone) {
		standalone = false;
	}

	if (standalone) {
		migrate();
	} else {
		return migrate();
	}
})();
