-----------------------------
----------|  NOW  |----------
-----------------------------

- finir la JSDoc
- finir les mocks des classes
- Refactor skeleton
- pouvoir générer une table db en fonction d'une entité et non d'un bundle
- faire en sorte que l'application se reconnecte à la base de données au bout de x seconds si la connexion n'a pas pu être établie ou a été rompue
- corriger tous les binaires et les mettre en cli
- voir les problèmes de synchro pour les roles dans la conf et les securités

- exposer dans un index.js (un par dossier) les classes de chaque dossier
- si on se trompe sur /login il faut renvoyer autre chose que 401 unauthorized ?
- faire les tests du vendor
- rédiger DOC

-----------------------------
---------|  LATER  |---------
-----------------------------

- pouvoir générer un service, un controller, un repository, une entity
- appliquer le logger aux endroits utiles
- simplifier le patch, faire une methode dans controller qui permet d'extraire les ops en un tableau d'objets simple, ou bien de
tout lier en promise pour les patchs
- faire un système d'abonnement sur des routes pour être linker avec les données modifiées de la vue, faire un flux pour les clients
- créer une classe Cache qui permet de mettre en cache pour n'importe quelle entité (possédant une clé de cache, par exemple la classe EntityManager
aurait comme clé 'entitymanager', et pourra gérer son cache interne dans cette clé)


-----------------------------
---------|  MAYBE  |---------
-----------------------------

- ? Utiliser CarminteJS (cross-db ORM)
- ? translate project to ts
- ? bin permettant de sync roles from db into config file, and reverse
- renommer les méthodes getQuelqueChose, en simplifiées. Exemples : getRepository() -> repository(), getModel() -> model(), getBody() -> body, getRouteParameter() -> routeParameter(), etc.
