-----------------------------
----------|  NOW  |----------
-----------------------------

- la méthode defineMiddlewaresRoutes du Router doit être déchargé dans Bundle, ce n'est pas à lui de parser les config des middleware, il faut renommer la méthode en defineMiddlewareRoute
- addNotFoundRoute dans le Router doit utiliser entièrement Response, donc il faut rajouter headersSent dans Response
- Quand on change le code ou écrire rs en console, nodemon ne détecte plus et ne recharge plus le projet
- Code plus robuste avec des checks dans les classes à propos des API ou libs externes, throw error en cas de problème
- Revoir l'encapsulation et jsdoc
- refactor Router, Application, Controller classes
- TU easy
- exporter role et user dans un repo externe, importable
- faire une PR pour ecmascript stages, afin de faciliter l'écriture d'objets :
    { core: application.core, container: kernel.container } <=> { application.core, kernel.container } (the last property in path becomes the object property and assign it the current value)
- rédiger DOC

-----------------------------
---------|  LATER  |---------
-----------------------------

- créer une classe Route pour refactorer le Router
- simplifier le patch, faire une methode dans controller qui permet d'extraire les ops en un tableau d'objets simple, ou bien de tout lier en promise pour les patchs
- faire un système d'abonnement sur des routes pour être linker avec les données modifiées de la vue, faire un flux pour les clients
- créer une classe Cache qui pourra être instanciée dans n'importe quelle autre classe afin de pouvoir gérer son cache
- mettre chaque composant (ou groupe de) easy indépendant en module externe github et npm (cf. @angular, @angular-router, etc.)

-----------------------------
---------|  MAYBE  |---------
-----------------------------

- Utiliser CarminteJS (cross-db ORM)
- translate project to ts
- bin permettant de sync roles from db into config file, and reverse
- renommer les méthodes getQuelqueChose, en simplifiées. Exemples : getRepository() -> repository(), getModel() -> model(), getBody() -> body, getRouteParameter() -> routeParameter(), etc.
