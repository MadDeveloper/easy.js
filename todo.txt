-----------------------------
----------|  NOW  |----------
-----------------------------

- mettre le vendor en tant que node_modules
- si on se trompe sur /login il faut renvoyer autre chose que 401 unauthorized ?
- faire les tests du vendor
- rédiger DOC

-----------------------------
---------|  LATER  |---------
-----------------------------

- pouvoir générer un service, un controller, un repository, une entity
- appliquer le logger aux endroits utiles
- simplifier le patch, faire une methode dans controller qui permet d'extraire les ops en un tableau d'objets simple, ou bien de
tout lier en promise pour les patchs
- faire un système d'abonnement sur des routes pour être linker avec les données modifiées de la vue, faire un flux pour les clients
- créer une classe Cache qui permet de mettre en cache pour n'importe quelle entité (possédant une clé de cache, par exemple la classe EntityManager
aurait comme clé 'entitymanager', et pourra gérer son cache interne dans cette clé)
- faire des snapshot du bundle Skeleton pour être restauré par la suite, les snapshots sont effectuées par le dev, la restoration à l'état initial reste
toujours possible.


-----------------------------
---------|  MAYBE  |---------
-----------------------------

- ? Utiliser CarminteJS (cross-db ORM)
- ? translate project to ts
- ? bin permettant de sync roles from db into config file, and reverse
- faire les interfaces easy et adapter le code (typé)
